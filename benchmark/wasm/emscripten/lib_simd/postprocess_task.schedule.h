#ifndef postprocess_task_SCHEDULE_H
#define postprocess_task_SCHEDULE_H

// MACHINE GENERATED -- DO NOT EDIT
// This schedule was automatically generated by Adams2019
// for target=wasm-32-wasmrt-wasm_bulk_memory-wasm_simd128  // NOLINT
// with machine_params=8,16777216,10

#include "Halide.h"


inline void apply_schedule_postprocess_task(
    ::Halide::Pipeline pipeline,
    ::Halide::Target target
) {
    using ::Halide::Func;
    using ::Halide::MemoryType;
    using ::Halide::RVar;
    using ::Halide::TailStrategy;
    using ::Halide::Var;
    Func output = pipeline.get_func(5);
    Func f0 = pipeline.get_func(3);
    Func f1 = pipeline.get_func(2);
    Var c(output.get_schedule().dims()[2].var);
    Var ci("ci");
    Var x(output.get_schedule().dims()[0].var);
    Var xi("xi");
    Var y(output.get_schedule().dims()[1].var);
    Var yi("yi");
    Var yii("yii");
    output
        .split(y, y, yi, 9, TailStrategy::ShiftInwards)
        .split(yi, yi, yii, 3, TailStrategy::ShiftInwards)
        .split(x, x, xi, 3, TailStrategy::ShiftInwards)
        .split(c, c, ci, 16, TailStrategy::GuardWithIf)
        .vectorize(ci)
        .compute_root()
        .reorder({ci, c, xi, x, yii, yi, y})
        .parallel(y)
        .reorder_storage(c, x, y);
    f0
        .store_in(MemoryType::Stack)
        .split(x, x, xi, 4, TailStrategy::RoundUp)
        .vectorize(xi)
        .compute_at(output, xi)
        .store_at(output, x)
        .reorder({xi, x, y});
    f1
        .store_in(MemoryType::Stack)
        .split(x, x, xi, 4, TailStrategy::ShiftInwards)
        .vectorize(xi)
        .compute_at(output, yi)
        .reorder({xi, x, y, c});

}

#endif  // postprocess_task_SCHEDULE_H
